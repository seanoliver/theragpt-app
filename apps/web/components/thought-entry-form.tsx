'use client'

import type React from 'react'

import { AIResponsePanel } from '@/apps/web/components/ai-response-panel'
import { Button } from '@/apps/web/components/ui/button'
import { Textarea } from '@/apps/web/components/ui/textarea'
import { entryService, useEntryStore } from '@theragpt/logic'
import { Loader2 } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { useState, useEffect, useRef } from 'react'

interface Distortion {
  id: string
  name: string
  explanation: string
}

interface AnalysisResult {
  distortions: Distortion[]
  reframedThought: string
  justification: string
}

interface AnalyzeResponse {
  result: AnalysisResult
}

export const ThoughtEntryForm = () => {
  // Local component state
  const [thought, setThought] = useState('')
  const [showResponse, setShowResponse] = useState(false)
  const [analysisResult, setAnalysisResult] = useState<
    AnalysisResult | undefined
  >(undefined)

  // Global state from Zustand store
  const router = useRouter()

  // Use individual selectors to prevent unnecessary re-renders
  const addEntry = useEntryStore(state => state.addEntry)
  const updateEntry = useEntryStore(state => state.updateEntry)
  const isLoading = useEntryStore(state => state.isLoading)
  const setLoading = useEntryStore(state => state.setLoading)
  const setError = useEntryStore(state => state.setError)

  // Auto-save entry when analysis result is available
  const hasAutoSaved = useRef(false)
  useEffect(() => {
    if (analysisResult && !hasAutoSaved.current) {
      handleSave()
      hasAutoSaved.current = true
    }
  }, [analysisResult])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!thought.trim()) return

    setLoading(true)

    try {
      // eslint-disable-next-line no-console
      console.log('Analyzing thought:', thought)
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          thought,
          tone: 'supportive', // Default tone
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to analyze thought')
      }

      const data: AnalyzeResponse = await response.json()
      // eslint-disable-next-line no-console
      console.log('Analysis result:', data.result)
      setAnalysisResult(data.result)
      setShowResponse(true)
    } catch (error) {
      console.error('Error analyzing thought:', error)
      setError('Failed to analyze thought')
    } finally {
      // Ensure loading state is always reset, even if there's an error
      setLoading(false)
    }
  }

  const handleSave = async () => {
    if (!thought || !analysisResult) return

    try {
      // Set loading state to true while saving
      setLoading(true)

      // Create a new entry with distortions
      const entry = await addEntry({
        id: '', // Will be generated by the service
        rawText: thought,
        createdAt: Date.now(),
      })

      if (entry) {
        // Convert distortions to the format expected by the entry service
        const distortionInstances = analysisResult.distortions.map(
          distortion => ({
            id: distortion.id,
            distortionId: distortion.id,
            text: distortion.explanation,
            timestamp: Date.now(),
          }),
        )

        // Update the entry with distortions
        await updateEntry({
          ...entry,
          distortions: distortionInstances,
        })

        // Add the reframe to the entry if it exists
        if (analysisResult.reframedThought) {
          await entryService.addReframe(entry.id, {
            text: analysisResult.reframedThought,
            source: 'ai',
            style: 'supportive', // Default style
            explanation: analysisResult.justification, // Add the explanation from the justification
          })
        }

        // Don't navigate to journal page - stay on the current page
      }
    } catch (error) {
      console.error('Error saving entry:', error)
      setError('Failed to save entry')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div>
      {!showResponse ? (
        <form onSubmit={handleSubmit} className="space-y-4">
          <Textarea
            placeholder="Type your thought here..."
            className="min-h-[120px] border-slate-200 dark:border-slate-700 focus:border-purple-300 dark:focus:border-purple-700 focus:ring-purple-300 dark:focus:ring-purple-700 bg-white/50 dark:bg-slate-800/50 backdrop-blur-sm"
            value={thought}
            onChange={e => setThought(e.target.value)}
            required
          />
          <div className="flex justify-end">
            <Button
              type="submit"
              className="bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 border-0"
              disabled={isLoading || !thought.trim()}
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Analyzing...
                </>
              ) : (
                'Analyze Thought'
              )}
            </Button>
          </div>
        </form>
      ) : (
        <AIResponsePanel
          originalThought={thought}
          analysisResult={analysisResult}
          onSave={handleSave}
          onReset={() => {
            setThought('')
            setShowResponse(false)
            setAnalysisResult(undefined)
          }}
        />
      )}
    </div>
  )
}
