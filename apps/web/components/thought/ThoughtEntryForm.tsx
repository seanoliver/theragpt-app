'use client'

import type React from 'react'

import { Textarea } from '@/apps/web/components/ui/textarea'
import { entryService, useEntryStore } from '@theragpt/logic'
import { useEffect, useRef, useState } from 'react'
import { AIResponsePanel } from './AIResponsePanel'
import { AnalyzeThoughtButton } from './AnalyzeThoughtButton'
import { ThoughtStarters } from './ThoughtStarters'
import { ThoughtStartersButton } from './ThoughtStartersButton'
interface Distortion {
  id: string
  name: string
  explanation: string
}

interface AnalysisResult {
  distortions: Distortion[]
  reframedThought: string
  justification: string
}

interface AnalyzeResponse {
  result: AnalysisResult
}

export const ThoughtEntryForm = () => {
  // Local component state
  const [thought, setThought] = useState('')
  const [showResponse, setShowResponse] = useState(false)
  const [analysisResult, setAnalysisResult] = useState<
    AnalysisResult | undefined
  >(undefined)
  const [showStarters, setShowStarters] = useState(false)
  const startersRef = useRef<HTMLDivElement>(null)

  // Global state from Zustand store

  // Use individual selectors to prevent unnecessary re-renders
  const addEntry = useEntryStore(state => state.addEntry)
  const updateEntry = useEntryStore(state => state.updateEntry)
  const isLoading = useEntryStore(state => state.isLoading)
  const setLoading = useEntryStore(state => state.setLoading)
  const setError = useEntryStore(state => state.setError)

  // Auto-save entry when analysis result is available
  const hasAutoSaved = useRef(false)
  useEffect(() => {
    if (analysisResult && !hasAutoSaved.current) {
      handleSave()
      hasAutoSaved.current = true
    }
  }, [analysisResult])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!thought.trim()) return

    setLoading(true)

    try {
      // eslint-disable-next-line no-console
      console.log('Analyzing thought:', thought)
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          thought,
          tone: 'supportive', // Default tone
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to analyze thought')
      }

      const data: AnalyzeResponse = await response.json()
      // eslint-disable-next-line no-console
      setAnalysisResult(data.result)
      setShowResponse(true)
    } catch (error) {
      console.error('Error analyzing thought:', error)
      setError('Failed to analyze thought')
    } finally {
      // Ensure loading state is always reset, even if there's an error
      setLoading(false)
    }
  }

  const handleSave = async () => {
    if (!thought || !analysisResult) return

    try {
      // Set loading state to true while saving
      setLoading(true)

      // Create a new entry with distortions
      const entry = await addEntry({
        id: '', // Will be generated by the service
        rawText: thought,
        createdAt: Date.now(),
      })

      if (entry) {
        // Convert distortions to the format expected by the entry service
        const distortionInstances = analysisResult.distortions.map(
          distortion => ({
            id: distortion.id,
            distortionId: distortion.id,
            text: distortion.explanation,
            timestamp: Date.now(),
          }),
        )

        // Update the entry with distortions
        await updateEntry({
          ...entry,
          distortions: distortionInstances,
        })

        // Add the reframe to the entry if it exists
        if (analysisResult.reframedThought) {
          await entryService.addReframe(entry.id, {
            text: analysisResult.reframedThought,
            source: 'ai',
            style: 'supportive', // Default style
            explanation: analysisResult.justification, // Add the explanation from the justification
          })
        }

        // Don't navigate to journal page - stay on the current page
      }
    } catch (error) {
      console.error('Error saving entry:', error)
      setError('Failed to save entry')
    } finally {
      setLoading(false)
    }
  }

  const handleThoughtStarterClick = (starter: string) => {
    setThought(starter)
    // Focus the textarea after setting the thought
    const textarea = document.querySelector('textarea')
    if (textarea) {
      textarea.focus()
      // Place cursor at the end of the text
      const length = starter.length
      textarea.setSelectionRange(length, length)
    }
  }

  return (
    <div>
      {!showResponse ? (
        <div className="flex-col">
          <form onSubmit={handleSubmit} className="relative space-y-4">
            <Textarea
              placeholder="What's a negative thought that's been bothering you?"
              className="min-h-[120px] p-4 shadow-md border-0 dark:border-0 focus:border-0 dark:focus:border-0 focus:ring-0 dark:focus:ring-0 bg-white/50 dark:bg-slate-800/50 backdrop-blur-sm"
              value={thought}
              onChange={e => setThought(e.target.value)}
              required
            />
            <div className="absolute bottom-0 right-0 p-2 gap-2 flex">
              <ThoughtStartersButton
                thought={thought}
                showStarters={showStarters}
                setShowStarters={setShowStarters}
              />
              <AnalyzeThoughtButton isLoading={isLoading} thought={thought} />
            </div>
          </form>
          <div
            ref={startersRef}
            className={`overflow-hidden transition-all shadow-md duration-300 ease-in-out ${
              showStarters
                ? 'max-h-[600px] opacity-100 mt-4'
                : 'max-h-0 opacity-0'
            }`}
          >
            <ThoughtStarters onSelect={handleThoughtStarterClick} />
          </div>
        </div>
      ) : (
        <AIResponsePanel
          originalThought={thought}
          analysisResult={analysisResult}
          onSave={handleSave}
          onReset={() => {
            setThought('')
            setShowResponse(false)
            setAnalysisResult(undefined)
          }}
        />
      )}
    </div>
  )
}
